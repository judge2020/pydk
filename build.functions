#!/bin/bash

#==================== put your favorites functions there ===============================

function wait_or_break
{
    echo -n  "
 <press enter to retry, or ctrl+c to exit>



> "
    read
    clear
}

function set_source_tree
{
    cd $ROOT

    echo "
Setting source tree in [$ROOT] for [$SRC]"

    while true
    do
        [ -d $SRC ] && break

        cd $ARCHIVES
        if echo "$XZ_SRC"|grep -q xz$
        then
            IS_XZ=true
        else
            IS_XZ=false
        fi

        if $IS_XZ
        then
            ARCHIVE="${ARCHIVES}/${SRC}.tar.xz"
        else
            ARCHIVE="${ARCHIVES}/${SRC}.zip"
        fi

        if md5sum -c ${ARCHIVE}.md5 2>/dev/null
        then
            echo "  * Archive $ARCHIVE.md5 validated"
            cd $ROOT && unzip $ARCHIVE | pv -w 60 -p -l -s $1 >/dev/null && break
        else
            echo "  * Can't validate archive with $ARCHIVE.md5"
            echo "  * Getting source code from [$GHZIP$XZ_SRC] into cache folder [$ARCHIVE]"
            wget $GHZIP$XZ_SRC -O$ARCHIVE
            cd $ROOT

            if $IS_XZ
            then
                if tar xvf $ARCHIVE | pv -w 60  -p -l -s $1 >/dev/null
                then
                    md5sum $ARCHIVE > $ARCHIVE.md5
                    break
                fi
            else
                if unzip $ARCHIVE | pv -w 60  -p -l -s $1 >/dev/null
                then
                    md5sum $ARCHIVE > $ARCHIVE.md5
                    break
                fi
            fi

        fi
        echo "is $ARCHIVE corrupted ?"
        wait_or_break
    done

    export ORIGIN=$ROOT/$SRC
    cd $ORIGIN
}


function register_pdk
{
    if echo $1 | grep -q PDK_
    then
        echo export $1="$2"
        touch $SDK/built.${BITS}.env
        grep -v $1 $SDK/built.${BITS}.env > $SDK/built.new
        echo export $1="$2" >> $SDK/built.new
        mv -v $SDK/built.${BITS}.env $SDK/built.${BITS}.bak
        sort $SDK/built.new | uniq >  $SDK/built.${BITS}.env
        rm -vf $SDK/built.new
        echo "  * Package $1 added to sdk.env, you may want to reload"
    else
        echo "usage: register_pdk PDK_key value"
    fi
}


function patch_me
{
    echo "
Patching source tree if required"

    if [ -f "$ORIGIN/PDK_PATCHED" ]
    then
        echo "  * All Patches already applied"
    else
        cd $ROOT/$SRC

        if [ -f $ROOT/$SRC.patchset/overlay.tar.bz2 ]
        then
            echo "  * Applying overlay [$ORIGIN.patchset/overlay.tar.bz2]"
            echo -n "     Overwritten files : "
            /bin/tar xvpjf $ROOT/$SRC.patchset/overlay.tar.bz2 | wc -l
        else
            echo "  * no overlay [$ORIGIN.patchset/overlay.tar.bz2] found to apply"
        fi

        if find $ORIGIN.patchset/ |grep -q diff$
        then
            for patch in $(find $ROOT/$SRC.patchset/*.diff)
            do
                echo -n "
    Applying patch : $patch   "
                patch -p1 < $patch
                echo
            done
        else
            echo "  * no patch to apply"
        fi

        touch PDK_PATCHED
    fi
}
