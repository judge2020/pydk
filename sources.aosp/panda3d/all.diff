--- panda3d/panda/CMakeLists.txt	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/CMakeLists.txt	2020-04-13 00:17:30.435728593 +0200
@@ -59,6 +59,10 @@
 add_subdirectory(src/wgldisplay)
 add_subdirectory(src/windisplay)
 add_subdirectory(src/x11display)
+if (ANDROID AND NOT HAVE_EGL)
+    add_subdirectory(src/viewdisplay)
+endif()
+
 
 # For other components
 # bullet
--- panda3d/panda/metalibs/pandagl/CMakeLists.txt	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/metalibs/pandagl/CMakeLists.txt	2020-04-13 00:17:30.435728593 +0200
@@ -1,3 +1,11 @@
+if(ANDROID)
+  set(PANDAGL_PIPE_TYPE "viewGraphicsPipe")
+  set(PANDAGL_LINK_TARGETS p3glstuff)
+  list(APPEND PANDAGL_LINK_TARGETS p3viewdisplay_gles2)
+    return()
+endif()
+
+
 if(NOT HAVE_GL)
   return()
 endif()
@@ -16,7 +24,6 @@
   list(APPEND PANDAGL_LINK_TARGETS p3cocoadisplay)
   set(PANDAGL_PIPE_TYPE "CocoaGraphicsPipe")
   set(PANDAGL_PIPE_INCLUDE "cocoaGraphicsPipe.h")
-
 else()
   message("") # Add extra line before error
   message(SEND_ERROR
--- panda3d/panda/metalibs/pandagles2/CMakeLists.txt	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/metalibs/pandagles2/CMakeLists.txt	2020-04-13 00:17:30.435728593 +0200
@@ -1,3 +1,26 @@
+if(ANDROID AND NOT HAVE_EGL)
+    if(HAVE_GLES2)
+        set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME "OpenGLES2Devel")
+        add_metalib(pandagles2 ${MODULE_TYPE}
+          INCLUDE viewGraphicsPipe.h
+          INIT init_libpandagles2 pandagles2.h
+          EXPORT int get_pipe_type_pandagles2 "ViewGraphicsPipe::get_class_type().get_index()"
+          COMPONENTS p3viewdisplay_gles2 p3glstuff p3gles2gsg)
+        unset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME)
+
+        install(TARGETS pandagles2
+          EXPORT OpenGLES2 COMPONENT OpenGLES2
+          DESTINATION ${MODULE_DESTINATION}
+          ARCHIVE COMPONENT OpenGLES2Devel)
+
+        export_targets(OpenGLES2 COMPONENT OpenGLES2Devel)
+    endif()
+
+    #discarded GLES1
+
+  return()
+endif()
+
 if(NOT HAVE_GLES2 OR NOT HAVE_EGL)
   return()
 endif()
@@ -10,6 +33,8 @@
   COMPONENTS p3egldisplay_gles2 p3gles2gsg p3glstuff p3x11display)
 unset(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME)
 
+
+
 install(TARGETS pandagles2
   EXPORT OpenGLES2 COMPONENT OpenGLES2
   DESTINATION ${MODULE_DESTINATION}
--- panda3d/panda/metalibs/pandagles2/pandagles2.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/metalibs/pandagles2/pandagles2.cxx	2020-04-13 00:17:30.435728593 +0200
@@ -3,7 +3,7 @@
  * @author rdb
  * @date 2009-06-08
  */
-
+#ifndef __ANDROID__
 #include "pandagles2.h"
 
 #define OPENGLES_2
@@ -32,3 +32,39 @@
 get_pipe_type_pandagles2() {
   return eglGraphicsPipe::get_class_type().get_index();
 }
+
+#else
+
+#include "pandagles2.h"
+
+#define OPENGLES_2
+#include "config_gles2gsg.h"
+
+//#include "config_egldisplay.h"
+//#include "eglGraphicsPipe.h"
+#include "config_viewdisplay.h"
+#include "viewGraphicsPipe.h"
+
+/**
+ * Initializes the library.  This must be called at least once before any of
+ * the functions or classes in this library can be used.  Normally it will be
+ * called by the static initializers and need not be called explicitly, but
+ * special cases exist.
+ */
+void
+init_libpandagles2() {
+  init_libgles2gsg();
+  init_libviewdisplay();
+}
+
+/**
+ * Returns the TypeHandle index of the recommended graphics pipe type defined
+ * by this module.
+ */
+int
+get_pipe_type_pandagles2() {
+  return viewGraphicsPipe::get_class_type().get_index();
+}
+
+
+#endif
--- panda3d/panda/src/display/graphicsEngine.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/display/graphicsEngine.cxx	2020-04-13 00:48:38.198119572 +0200
@@ -50,6 +50,14 @@
 #include "depthTestAttrib.h"
 #include "unionBoundingVolume.h"
 
+#if __ANDROID__
+#include <android/log.h>
+#undef LOG_TAG
+#define LOG_TAG "DEBUG:graphicsEngine"
+#define LOG_I(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
+#define LOG_E(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
+#endif
+
 #if defined(_WIN32) && defined(HAVE_THREADS) && defined(SIMPLE_THREADS)
 #include "winInputDeviceManager.h"
 #endif
@@ -287,7 +295,9 @@
  */
 
   // Simplify the input parameters.
-
+#if __ANDROID__
+LOG_I("291: make_output");
+#endif
   int x_size = 0, y_size = 0;
   if (win_prop.has_size()) {
     x_size = win_prop.get_x_size();
@@ -307,6 +317,9 @@
   if (host == nullptr) {
     if (gsg != nullptr) {
       if ((!gsg->is_valid())||(gsg->needs_reset())) {
+#if __ANDROID__
+LOG_E("320:open_windows");
+#endif
         open_windows();
       }
       if ((!gsg->is_valid())||(gsg->needs_reset())) {
@@ -318,6 +331,9 @@
         (!host->is_valid())||
         (!host->get_gsg()->is_valid())||
         (host->get_gsg()->needs_reset())) {
+#if __ANDROID__
+LOG_E("332:open_windows");
+#endif
       open_windows();
     }
     if ((host->get_gsg()==nullptr)||
@@ -410,7 +426,12 @@
 
   // Ask the pipe to create a window.
 
+#if __ANDROID__
+  for (int retry=0; retry<1; retry++) {
+    LOG_E("425: make_output");
+#else
   for (int retry=0; retry<10; retry++) {
+#endif
     bool precertify = false;
     PT(GraphicsOutput) window =
       pipe->make_output(name, fb_prop, win_prop, flags, this, gsg, host, retry, precertify);
@@ -422,6 +443,10 @@
           << "Created output of type " << window->get_type() << "\n";
         return window;
       }
+#if __ANDROID__
+LOG_E("442:do_add_window()");
+LOG_E("444:open_windows");
+#endif
       do_add_window(window);
       open_windows();
       if (window->is_valid()) {
@@ -724,7 +749,11 @@
   // that we don't render a frame before the offscreen buffers are ready
   // (which might result in a frame going by without some textures having
   // been rendered).
+#if __ANDROID__
+    #pragma message "744:open_windows removed"
+#else
   open_windows();
+#endif
 
   ClockObject *global_clock = ClockObject::get_global_clock();
 
@@ -964,17 +993,20 @@
  */
 void GraphicsEngine::
 open_windows() {
+
   Thread *current_thread = Thread::get_current_thread();
 
   ReMutexHolder holder(_lock, current_thread);
-
   pvector<PT(GraphicsOutput)> new_windows;
   {
     MutexHolder new_windows_holder(_new_windows_lock, current_thread);
+
     if (_new_windows.empty()) {
       return;
     }
-
+#if __ANDROID__
+LOG_I("1002:open_windows-> good ! not empty");
+#endif
     for (auto it = _new_windows.begin(); it != _new_windows.end(); ++it) {
       GraphicsOutput *window = *it;
 
@@ -1046,7 +1078,16 @@
     GraphicsOutput *window = *it;
     if (window->is_valid()) {
       do_add_gsg(window->get_gsg(), window->get_pipe());
+#if __ANDROID__
+        if (is_empty())
+            LOG_E("1077:no window");
+        else
+            LOG_I("1077: filled up");
+#endif
     } else {
+#if __ANDROID__
+LOG_E("988:open_windows->remove !");
+#endif
       remove_window(window);
     }
   }
--- panda3d/panda/src/display/graphicsWindow.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/display/graphicsWindow.cxx	2020-04-13 00:17:30.435728593 +0200
@@ -21,6 +21,14 @@
 #include "throw_event.h"
 #include "string_utils.h"
 
+#if __ANDROID__
+#include <android/log.h>
+#undef LOG_TAG
+#define LOG_TAG "DEBUG:graphicsWindow"
+#define LOG_I(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
+#define LOG_E(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
+#endif
+
 using std::string;
 
 TypeHandle GraphicsWindow::_type_handle;
@@ -471,7 +479,11 @@
       if (properties.is_any_specified()) {
         display_cat.info()
           << "Unable to set window properties: " << properties << "\n";
+#if __ANDROID__
+LOG_E("_rejected_properties.add_properties(properties)");
+#else
         _rejected_properties.add_properties(properties);
+#endif
       }
     }
   }
--- panda3d/panda/src/gles2gsg/CMakeLists.txt	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/gles2gsg/CMakeLists.txt	2020-04-13 00:17:30.437728566 +0200
@@ -13,10 +13,13 @@
 )
 
 composite_sources(p3gles2gsg P3GLES2GSG_SOURCES)
-add_component_library(p3gles2gsg SYMBOL BUILDING_PANDAGLES2
-  ${P3GLE2SGSG_HEADERS} ${P3GLES2GSG_SOURCES})
-target_link_libraries(p3gles2gsg p3glstuff panda
-  PKG::GLES2)
+add_component_library(p3gles2gsg SYMBOL BUILDING_PANDAGLES2 ${P3GLE2SGSG_HEADERS} ${P3GLES2GSG_SOURCES})
+
+if (ANDROID)
+    target_link_libraries(p3gles2gsg p3glstuff panda PKG::GLES2)
+else()
+    target_link_libraries(p3gles2gsg p3glstuff panda PKG::GLES2)
+endif()
 
 if(NOT BUILD_METALIBS)
   install(TARGETS p3gles2gsg
--- panda3d/panda/src/gles2gsg/config_gles2gsg.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/gles2gsg/config_gles2gsg.cxx	2020-04-13 00:17:30.437728566 +0200
@@ -40,6 +40,5 @@
     return;
   }
   initialized = true;
-
   GLES2init_classes();
 }
--- panda3d/panda/src/gles2gsg/gles2gsg.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/gles2gsg/gles2gsg.cxx	2020-04-13 00:17:30.437728566 +0200
@@ -17,3 +17,4 @@
 
 #include "gles2gsg.h"
 #include "glstuff_src.cxx"
+
--- panda3d/panda/src/glstuff/CMakeLists.txt	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/glstuff/CMakeLists.txt	2020-04-13 00:17:30.437728566 +0200
@@ -1,6 +1,9 @@
+if(ANDROID)
+else()
 if(NOT HAVE_GL)
   return()
 endif()
+endif()
 
 set(P3GLSTUFF_HEADERS
   glGeomContext_src.I
--- panda3d/panda/src/pipeline/threadDummyImpl.cxx	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/pipeline/threadDummyImpl.cxx	2020-04-13 00:17:30.437728566 +0200
@@ -25,6 +25,13 @@
 #include <windows.h>
 #endif
 
+#ifdef ANDROID
+#include "config_express.h"
+#include <jni.h>
+
+static JavaVM *java_vm = nullptr;
+#endif
+
 /**
  *
  */
--- panda3d/panda/src/pipeline/threadDummyImpl.h	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/pipeline/threadDummyImpl.h	2020-04-13 00:17:30.437728566 +0200
@@ -31,6 +31,10 @@
 #include <windows.h>  // For Sleep().
 #endif
 
+#ifdef ANDROID
+typedef struct _JNIEnv JNIEnv;
+#endif
+
 /**
  * A fake thread implementation for single-threaded applications.  This simply
  * fails whenever you try to start a thread.
@@ -57,6 +61,13 @@
   INLINE static void sleep(double seconds);
   INLINE static void yield();
   INLINE static void consider_yield();
+
+#ifdef ANDROID
+  INLINE JNIEnv *get_jni_env() const;
+  bool attach_java_vm();
+  static void bind_java_thread();
+#endif
+
 };
 
 #include "threadDummyImpl.I"
--- panda3d/panda/src/pipeline/threadDummyImpl.I	2020-03-20 15:48:21.000000000 +0100
+++ panda3d-android/panda/src/pipeline/threadDummyImpl.I	2020-04-13 00:17:30.437728566 +0200
@@ -124,3 +124,13 @@
 INLINE void ThreadDummyImpl::
 consider_yield() {
 }
+
+#ifdef ANDROID
+/**
+ * Returns the JNIEnv object for the current thread.
+ */
+INLINE JNIEnv *ThreadDummyImpl::
+get_jni_env() const {
+  return nullptr;
+}
+#endif
