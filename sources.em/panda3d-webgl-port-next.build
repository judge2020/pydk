#!/bin/bash

export PYVER=3.8 # and only !
PYTHON=cpython-3.8.0a1

SRC_URL="https://github.com/panda3d/panda3d/archive/webgl-port.zip"
SRC=panda3d-webgl-port

FT2=FreeType-master
HB=harfbuzz-master


OPT_COMMON="--optimize 4 --use-freetype --use-gles --use-gles2 --use-bullet --use-zlib --use-python --use-direct --use-openssl --use-openal"
OPT_COMMON="$OPT_COMMON --no-ffmpeg --no-png --no-jpeg --no-eigen --no-assimp --no-egg --no-x11"
OPT_COMMON="$OPT_COMMON  --override STDFLOAT_DOUBLE=1 --override HAVE_THREADS=UNDEF"

#--nothing
OPT_TARGET="--target emscripten --no-pandatool --no-neon --no-sse2"
OPT_TARGET="$OPT_TARGET --use-python --use-direct --no-pview --use-egl"

#==============================================================================
ROOT=$(dirname $(realpath "$0") )

. $SDK/build.functions
. $SDK/build.${BITS}.functions

set_source_tree 7200

patch_me

#reparse just in case python was built without reloading env
. $SDK/built.${BITS}.env

if $PDK_EM_PYTHON_HOST -V | grep -q $PYVER
then
    echo "Will use python $PYVER :  $PDK_EM_PYTHON_HOST"
    export PANDA_PYLIB=python${PYVER}m
else
    echo "This script is for cpython $PYVER emscripten only"
    read
    exit
fi

export ORIGIN=$(pwd)

EM_LIBS=""
#EM_FLAGS="-O3 -s ASM_JS=1 -s USE_ZLIB=1 "

if echo "$@" | grep -q asm
then
    echo "   ===== asm.js ========"
    export EM_MODE="-s ASM_JS=1"
else
    echo "   ===== WASM ========"
    export EM_MODE="-s BINARYEN_TRAP_MODE=\"clamp\" -s WASM=1"
   # -s EMULATE_FUNCTION_POINTER_CASTS=1"  # to allow loading libpython ...
fi

#-fno-exceptions is set at bottom

#EM_LIBS="-s OFFSCREENCANVAS_SUPPORT=1 -s USE_WEBGL2=1"
EM_LIBS="-s FULL_ES2=1 -s USE_WEBGL2=1"
EM_LIBS="$EM_LIBS -s USE_HARFBUZZ=1 -s USE_FREETYPE=1 -s USE_OGG=1 -s USE_VORBIS=1 -s USE_BULLET=1 -s USE_ZLIB=1"

#-s SIDE_MODULE=1 => NO
EM_FLAGS="-O3 -fno-rtti -s LINKABLE=1 $EM_MODE"
EM_FLAGS="$EM_FLAGS -s ASSERTIONS=1 -s DEMANGLE_SUPPORT=0 -s DISABLE_EXCEPTION_CATCHING=1"

#popen
EM_FLAGS="$EM_FLAGS -s ERROR_ON_UNDEFINED_SYMBOLS=0"

#EM_FLAGS="$EM_FLAGS -s AGGRESSIVE_VARIABLE_ELIMINATION=1 -s ELIMINATE_DUPLICATE_FUNCTIONS=1"
#-s EMULATE_FUNCTION_POINTER_CASTS=1"
#EM_FLAGS="$EM_FLAGS -s ERROR_ON_MISSING_LIBRARIES=0 "


if [ -f $PDK_EM_PYTHON_HOST ]
then
    #    echo "sudo apt-get install build-essential checkinstall pkg-config python-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev libxrandr-dev # libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev nvidia-cg-toolkit libgtk2.0-dev libgles2-mesa-dev"

    echo "
        * cleaning up thirdparties
    "

    rm -rf thirdparty

    echo "
        * Entering $(pwd)
    "
    mkdir -p thirdparty/host-libs
    mkdir -p thirdparty/emscripten-libs

    export TP_HOST=${ORIGIN}/thirdparty/host-libs
    export TP=${ORIGIN}/thirdparty/emscripten-libs

    echo "
        * Setting Host python ${TP}/python include+lib
    "
    mkdir -p ${TP} ${TP}/python ${TP}/python${PYVER} ${TP_HOST}

    ln -sf ${ROOT}/${PYTHON}.host ${TP_HOST}/python${PYVER}

    ln -sf ${ROOT}/${PYTHON}.${BITS}/lib ${TP}/python${PYVER}/lib
    ln -sf ${ROOT}/${PYTHON}.${BITS}/lib ${TP}/python/lib
    ln -sf ${ROOT}/${PYTHON}.host/include ${TP}/python${PYVER}/include
    ln -sf ${ROOT}/${PYTHON}.host/include/python${PYVER}/include ${TP}/python${PYVER}/include

    echo "
        * Setting FT2 ${TP}/freetype2 include+lib
    "

    mkdir -p ${TP}/freetype2 ${TP}/freetype2/lib
    ln -s ${ROOT}/${FT2}/include ${TP}/freetype2

    #cp -vf ${ROOT}/${FT2}.em/libfreetype.a ${TP}/libfreetype.a

    TP_FT2="--use-freetype" # --freetype-incdir=${TP}" # --freetype-libdir=${TP}"

#    TP_VB="--use-vorbis --vorbis-incdir=${TP} --vorbis-libdir=${TP}"

    if false
    then
        TP_HB="--use-harfbuzz --harfbuzz-incdir=${TP} --harfbuzz-libdir=${TP}"
        mkdir -p ${TP}/harfbuzz/lib
        ln -s ${ROOT}/${HB}/src/*.h ${TP}/harfbuzz/
        cp -vf ${ROOT}/${HB}.em/libharfbuzz.a ${TP}/
    fi


#    TP_BUL="--use-bullet --bullet-incdir=${TP} --bullet-libdir=${TP}"
#    ln -s ${ROOT}/bullet3-master/src ${TP}/bullet
#    cp -vf $(find ${ROOT}/bullet3-master/|grep /lib.*.a$) ${TP}/

    TP_PYTHON="--use-python --python-incdir=${TP_HOST}/python${PYVER}/include --python-libdir=${TP_HOST}/python${PYVER}/lib"

    TP_ALL="${TP_FT2} ${TP_HB} ${TP_OA} ${TP_VB} ${TP_BUL} ${TP_PYTHON}"

    if [ -d host ]
    then
        echo "
        * Host tools found
    "
    else

        $PDK_EM_PYTHON_HOST makepanda/makepanda.py --everything $OPT_COMMON $TP_PYTHON "$@"
        mv built host
    fi

    . $TOOLCHAIN

    echo $(which em++)


    export LD_LIBRARY_PATH=$(pwd)/host/lib
    export PATH=$(pwd)/host/bin:$PATH

    if echo $(which interrogate)|grep -q interrogate
    then
        echo "
            * interrogate is $(which interrogate)
        "
    else
        echo "
FATAL: interrogate not found in host/bin build
        "
        read
    fi

    TP_OA="--use-openal --openal-incdir=${TP} --openal-libdir=${TP}"

    TP_PYTHON="--use-python --python-incdir=${TP}/python${PYVER}/include --python-libdir=${TP}/python/lib"
    #--python-libdir=${TP}/python${PYVER}/lib"

    TP_ALL="${TP_FT2} ${TP_HB} ${TP_OA} ${TP_VB} ${TP_BUL} ${TP_PYTHON}"

    export CXXFLAGS="-std=c++11 -fno-exceptions $EM_FLAGS $EM_LIBS"

    echo export LD_LIBRARY_PATH=$(pwd)/host/lib > rebuild.sh
    echo export PATH=$(pwd)/host/bin:$PATH >> rebuild.sh
    echo "export CXXFLAGS='-std=c++11 -fno-exceptions $EM_FLAGS $EM_LIBS'" >> rebuild.sh
    echo $PDK_EM_PYTHON_HOST makepanda/makepanda.py $OPT_COMMON $OPT_TARGET $TP_ALL "$@" >> rebuild.sh
    chmod +x rebuild.sh
    ./rebuild.sh "$@"
    #$PDK_EM_PYTHON_HOST makepanda/makepanda.py $OPT_COMMON $OPT_TARGET $TP_ALL "$@"
else
    echo "FATAL: Can't find static host cpython $PDK_PYTHON"
fi



































#
