--- Python-3.7.2/Lib/threading.py	2018-12-23 22:37:36.000000000 +0100
+++ Python-3.7.2.em/Lib/threading.py	2019-01-26 10:07:31.069633238 +0100
@@ -241,7 +241,8 @@
         return self._lock.__enter__()
 
     def __exit__(self, *args):
-        return self._lock.__exit__(*args)
+        try:return self._lock.__exit__(*args)
+        except:pass
 
     def __repr__(self):
         return "<Condition(%s, %d)>" % (self._lock, len(self._waiters))
@@ -343,7 +344,9 @@
 
         """
         if not self._is_owned():
-            raise RuntimeError("cannot notify on un-acquired lock")
+            pass
+            #raise RuntimeError("cannot notify on un-acquired lock")
+
         all_waiters = self._waiters
         waiters_to_notify = _deque(_islice(all_waiters, n))
         if not waiters_to_notify:
