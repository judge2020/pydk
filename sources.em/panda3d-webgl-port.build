#!/bin/bash

GHZIP=https://github.com/panda3d/panda3d/archive/webgl-port.zip
ZIP=panda3d-webgl-port
SRC=panda3d-webgl-port
PYTHON=cpython-bpo-30386

OPT_COMMON="--optimize 3 --use-gles --use-gles2 --use-bullet --use-zlib --use-python --use-png"
OPT_COMMON="$OPT_COMMON --no-jpeg --no-eigen --no-assimp --no-egg --no-x11"
OPT_COMMON="$OPT_COMMON  --override STDFLOAT_DOUBLE=1"
OPT_TARGET="--target emscripten --no-pview --no-pandatool --no-neon --no-sse2"

# export CXXFLAGS="-std=c++11 -O2 $EM_LIBS $EM_FLAGS"

#==============================================================================
ROOT=$(dirname $(realpath "$0") )

. $SDK/build.functions
. $SDK/build.${BITS}.functions

set_source_tree 7200

patch_me

#reparse just in case python was built without reloading env
. $SDK/built.${BITS}.env

if $PDK_EM_PYTHON_HOST -V | grep -q 3.7
then
    echo "Will use python 3.7 :  $PDK_EM_PYTHON_HOST"
    export PANDA_PYLIB=python3.7m
else
    echo "This script is for cpython 3.7 emscripten only"
    read
    exit
fi

cd ${ORIGIN}


if [ -f $PDK_EM_PYTHON_HOST ]
then
    #    echo "sudo apt-get install build-essential checkinstall pkg-config python-dev libpng-dev libjpeg-dev libtiff-dev zlib1g-dev libssl-dev libx11-dev libgl1-mesa-dev libxrandr-dev # libxxf86dga-dev libxcursor-dev bison flex libfreetype6-dev libvorbis-dev libeigen3-dev libopenal-dev libode-dev libbullet-dev nvidia-cg-toolkit libgtk2.0-dev libgles2-mesa-dev"

    echo "
        * cleaning up thirdparties
    "

    rm -rf thirdparty

    echo "
        * Entering $(pwd)
    "

    mkdir -p thirdparty/host-libs
    mkdir -p thirdparty/emscripten-libs

    export TP_HOST=${ORIGIN}/thirdparty/host-libs
    export TP=${ORIGIN}/thirdparty/emscripten-libs

    echo "
        * Setting Host python ${TP}/python include+lib
    "
    mkdir -p ${TP} ${TP_HOST}
    #/python${PYVER}/{lib,include,include/python${PYDOT}${PYMODE}}

    ln -sf ${ROOT}/${PYTHON}.host ${TP_HOST}/python${PYVER}
    ln -sf ${ROOT}/${PYTHON}.${BITS} ${TP}/python${PYVER}

    echo "
        * Setting FT2 ${TP}/freetype2 include+lib
    "

    #mkdir -p ${TP}/freetype2 ${TP}/freetype2/lib
    #ln -s ${ROOT}/${FT2}/include ${TP}/freetype2
    #cp -vf ${ROOT}/${FT2}/Android/obj/local/armeabi-v7a/libfreetype2-static.a ${TP}/libfreetype.a
    #cp -vf ${ROOT}/${FT2}/Android/libs/armeabi/libfreetype.so ${TP}/

#    TP_FT2="--use-freetype --freetype-incdir=${TP} --freetype-libdir=${TP}"
#    TP_HB="--use-harfbuzz --harfbuzz-incdir=${TP} --harfbuzz-libdir=${TP}"
#    TP_VB="--use-vorbis --vorbis-incdir=${TP} --vorbis-libdir=${TP}"
#
#    VB="libvorbis-libogg-android-master"
#    ln -s ${ROOT}/${VB}/jni/include/vorbis ${TP}/
#    ln -s ${ROOT}/${VB}/jni/include/ogg ${TP}/
#
#    cp -vf ${ROOT}/${VB}/libs/armeabi-v7a/lib*.so ${TP}/
#
#    HB=harfbuzz-android-master
#    mkdir -p ${TP}/harfbuzz/lib
#    ln -s ${ROOT}/${HB}/src/*.h ${TP}/harfbuzz/
#    cp -vf ${ROOT}/${HB}/obj/local/armeabi-v7a/libharfbuzz.so ${TP}/
#
#
#    TP_BUL="--use-bullet --bullet-incdir=${TP} --bullet-libdir=${TP}"
#    ln -s ${ROOT}/bullet3-master/src ${TP}/bullet
#    cp -vf $(find ${ROOT}/bullet3-master/|grep /lib.*.a$) ${TP}/

    TP_PYTHON="--use-python --python-incdir=${TP_HOST}/python${PYVER}/include --python-libdir=${TP_HOST}/python${PYVER}/lib"

    TP_ALL="${TP_FT2} ${TP_HB} ${TP_OA} ${TP_VB} ${TP_BUL} ${TP_PYTHON}"

    if [ -d host ]
    then
        echo "
        * Host tools found
    "
    else

        $PDK_EM_PYTHON_HOST makepanda/makepanda.py --everything $OPT_COMMON $TP_PYTHON "$@"
        mv built host
    fi

    . $TOOLCHAIN

    echo $(which em++)


    #cp -vf ../${PYTHON}/Android/build/python${PYDOT}-android-${ANDROID_API}-${ANDROID_ARCH}/pyconfig.h ${TP}/python${PYVER}/include/python${PYDOT}${PYMODE}/
    export LD_LIBRARY_PATH=$(pwd)/host/lib
    export PATH=$(pwd)/host/bin:$PATH

    if echo $(which interrogate)|grep -q interrogate
    then
        echo "
            * interrogate is $(which interrogate)
        "
    else
        echo "
FATAL: interrogate not found in host/bin build
        "
        read
    fi

    TP_OA="--use-openal --openal-incdir=${TP} --openal-libdir=${TP}"

    TP_PYTHON="--use-python --python-incdir=${TP}/python${PYVER}/include --python-libdir=${TP}/python${PYVER}/lib"

    TP_ALL="${TP_FT2} ${TP_HB} ${TP_OA} ${TP_VB} ${TP_BUL} ${TP_PYTHON}"

    export CXXFLAGS="-std=c++11 -O2 $EM_LIBS $EMFLAGS"
    $PDK_EM_PYTHON_HOST makepanda/makepanda.py $OPT_COMMON $OPT_TARGET $TP_ALL "$@"
else
    echo "FATAL: Can't find static host cpython $PDK_PYTHON"
fi

echo "Installing to $DEV_APPDIR"


#
#mkdir -p "$DEV_APPDIR/lib-${ANDROID_ARCH}/"
#mkdir -p "$DEV_APPDIR/usr/lib-${ANDROID_ARCH}/panda3d/"
#
#if [ -f panda3d/built/lib/libpython3.7m.so ]
#then
#    mv -vf panda3d/built/lib/libpython3.7m.so "$DEV_APPDIR/lib-${ANDROID_ARCH}/"
#fi
#
#export PDK_PANDA3D=$DEV_APPDIR/usr/lib-$ANDROID_ARCH/panda3d
#
#export PDK_PYPANDA3D="$DEV_APPDIR/usr/lib/python${PYDOT}/site-packages/panda3d"
#
#mkdir -p $PDK_PYPANDA3D
#
#touch $PDK_PYPANDA3D/__init__.py
#
#echo "
#    * installing python package in $PDK_PYPANDA3D/__init__.py
#    "
#
#if [ -f $PDK_PYPANDA3D/__init__.py ]
#then
#    cat > $PDK_PYPANDA3D/__init__.py <<END
#import sys, os
#from ctypes import CDLL
##libgnustl_shared.so
##libc++_shared.so
#LIBS = """
#libgnustl_shared.so
#libogg.so
#libvorbisfile.so
#libvorbis.so
#libfreetype.so
#libharfbuzz.so
#libopenal.so
#libp3dtool.so
#libp3dtoolconfig.so
#libpandaexpress.so
#libpanda.so
#libp3openal_audio.so
#libp3direct.so
#libp3dcparse.so
#libpandaphysics.so
#libmultify.so
#libp3framework.so
#libpzip.so
#libpandafx.so
#libp3interrogatedb.so
#libinterrogate.so
#libinterrogate_module.so
#libpunzip.so
#libp3android.so
#libpandaskel.so
#libpandabullet.so
#libparse_file.so
#libpandagles2.so
#libpandaai.so
#libp3vision.so
#libpandaegg.so
#libtest_interrogate.so
#""".strip()
#
#DLLS = list( map(str.strip, LIBS.split('\n') ) )
#appdir = '/'.join(__file__.split('/',4)[:-1])
#print('APPDIR: %s' % appdir )
#for lpass in range(4):
#    poplist = []
#    for dll in DLLS:
#        try:
#            dll_path = '%s'
#            for dll_path in [ "%s/lib/%s", "%s/usr/lib-armv7/panda3d/%s", "%s/lib-armv7/%s" ]:
#                dll_path = dll_path % (appdir, dll)
#                if os.access(dll_path, 0):
#                    #print(lpass,dll,file=sys.stderr)
#                    CDLL( dll_path )
#                    poplist.append(dll)
#                    break
#            else:
#                print("?",dll)
#        except Exception as e:
#            print(lpass,dll,e,file=sys.stderr)
#    while len(poplist):
#        DLLS.remove(poplist.pop(0))
#END
#
#    pwd
#    if [ -d built/libs ]
#    then
#        # first move python libs and clean SONAME
#        echo "
#    * installing python support libs
#    "
#        #for pylib in $(find built/libs/*/*.cpython-*.so)
#        #$(find built/|grep cpython-37m.so$)
#
#
#
#        for pylib in built/panda3d/*.cpython-*.so
#        do
#            mv -vf $pylib $PDK_PYPANDA3D/
#            #$(basename $pylib|cut -f1 -d.).so
#        done
#
#
#        # then panda
#        echo "
#    * installing panda c++ support libs
#    "
#
#        for pandalib in built/*/*-*/lib*so built/lib/lib*so
#        do
#            mv -vf $pandalib $DEV_APPDIR/usr/lib-$ANDROID_ARCH/panda3d/
#        done
#        rmdir built/libs/* built/libs
#    fi
#
#    echo "
#
#    Panda3d $ANDROID_ARCH port installed in [$DEV_APPDIR]
#    See gradle sample project to link both python and panda3d in your apk
#
#    Python support libs : $PDK_PYPANDA3D
#    C++ support libs : $PDK_PANDA3D
#
#"
#    if [ -f /data/data/DEV ]
#    then
#        echo "syncing with URoot"
#        for dest in /data/target/u.r /data/data/armhf/u.r
#        do
#            cp -vf /data/data/u.r/usr/bin/python3.7m            $dest/usr/bin/python3.7m
#            cp -vf /data/data/u.r/lib-armv7/libpython3.7m.so    $dest/lib-armv7/libpython3.7m.so
#            cp -vf /data/data/u.r/usr/lib/python3.7/lib-dynload/*.py $dest/usr/lib/python3.7/lib-dynload/
#
#            echo lib-armv7
#            cp -vRf /data/data/u.r/usr/lib-armv7/* $dest/usr/lib-armv7/ | wc -l
#
#            echo PANDA_MODULES
#            cp -vRf /data/data/u.r/usr/lib/python3.7/site-packages/panda3d $dest/usr/lib/python3.7/site-packages/ | wc -l
#        done
#    fi
#
#    register_pdk PDK_PANDA3D ${ORIGIN}
#    export PDK_PANDA3D=${ORIGIN}
#
#    if [ -d ../LUI-android ]
#    then
#        cd ../LUI-android
#        rm -rf linux_*_panda1.10.0_py37 android_*_panda1.10.0_py37 lui.so
#
#        $PDK_PANDA3D/pandahost.sh build.py --clean "$@"
#
#        cp -vf lui.so /data/data/u.r/usr/lib/python3.7/site-packages/panda3d/
#
#        if [ -f /data/data/DEV ]
#        then
#            cp -vf lui.so /data/data/armhf/u.r/usr/lib/python3.7/site-packages/panda3d/
#            cp -vf lui.so /data/target/u.r/usr/lib/python3.7/site-packages/panda3d/
#        fi
#    fi
#else
#    echo "PDK_PYPANDA3D: wrong target path '$PDK_PANDA3D'"
#fi
#
#
#
#
#
#
#
#
#
#
#
#


































#
