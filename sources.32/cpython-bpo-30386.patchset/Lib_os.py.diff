--- cpython-bpo-30386/Lib/os.py	2017-12-10 15:07:21.000000000 +0100
+++ cpython-bpo-30386.api19/Lib/os.py	2018-02-23 02:01:35.022484286 +0100
@@ -1076,3 +1076,48 @@
     @classmethod
     def __subclasshook__(cls, subclass):
         return hasattr(subclass, '__fspath__')
+
+
+if sys.platform=='android':
+#access('/system/bin/linker',0):
+    if sys.getandroidapilevel() <20:
+        def ttyname(fdnum):
+            fdnum = int(fdnum)
+            bestshot = '/dev/pts/0'
+            bad = True
+            uid = getuid()
+            while bad and fdnum>=0:
+                couldbe = '/dev/pts/%i' % fdnum
+                if access(couldbe,R_OK):
+                    if access(couldbe, W_OK) and uid == stat(couldbe).st_uid:
+                        bestshot = couldbe
+                        break
+                fdnum -=1
+            return bestshot
+#    def ttyname(fdnum):
+#        import cffi
+#        ffi = cffi.FFI()
+#        ffi.cdef("int ptsname_r(int fd, char *buf, size_t buflen);")
+#        LIBC = ffi.dlopen('c')
+#        fdnum = int(fdnum)
+#        pchar = ffi.new("char []",bytes(chr(0) * 16,'utf-8') )
+#        LIBC.ptsname_r( fdnum, pchar, 16)
+#        return ffi.string(pchar)
+#
+
+        try:getcwd()
+        except:chdir( path.realpath("/proc/%s/cwd" % getpid() ).replace(' (deleted)','') )
+
+#        LIBC= None
+#        def getcwd():
+#            global LIBC
+#
+#            import cffi
+#            ffi = cffi.FFI()
+#            LIBC = ffi.dlopen('/system/lib/libc.so')
+#
+#            ffi.cdef("char *getcwd(char *buf, size_t size);")
+#            pchar = ffi.new("char []",bytes(chr(0) * 512,'utf-8') )
+#            LIBC.getcwd( pchar, 512)
+#            return ffi.string(pchar).decode('utf-8')
+
