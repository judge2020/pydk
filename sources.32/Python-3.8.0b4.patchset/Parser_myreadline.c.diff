--- Python-3.8.0b4/Parser/myreadline.c	2019-08-29 23:59:20.000000000 +0200
+++ Python-3.8.0b4.32/Parser/myreadline.c	2019-08-31 11:57:53.565671086 +0200
@@ -22,7 +22,12 @@
 #include "pythread.h"
 static PyThread_type_lock _PyOS_ReadlineLock = NULL;
 
+#include <fcntl.h>
+
+static int async_init = 0;
+//PyAPI_DATA(int) (*PyOS_InputHook)(void);
 int (*PyOS_InputHook)(void) = NULL;
+char *(*PyOS_InputProcessor)(const char *) = NULL;
 
 /* This function restarts a fgets() after an EINTR error occurred
    except if PyOS_InterruptOccurred() returns true. */
@@ -30,45 +35,61 @@
 static int
 my_fgets(char *buf, int len, FILE *fp)
 {
-#ifdef MS_WINDOWS
-    HANDLE hInterruptEvent;
-#endif
     char *p;
     int err;
+    fd_set selectset;
+    FD_ZERO(&selectset);
+
     while (1) {
-        if (PyOS_InputHook != NULL)
-            (void)(PyOS_InputHook)();
+        int fd = fileno(stdin);
+        int flags = fcntl(fd, F_GETFL, 0);
+        flags |= O_NONBLOCK;
+        fcntl(fd, F_SETFL, flags);
+
+        int has_input = 0;
+        char *buf_ptr;
+        buf_ptr = buf;
+        p = NULL;
         errno = 0;
         clearerr(fp);
-        p = fgets(buf, len, fp);
-        if (p != NULL)
-            return 0; /* No error */
-        err = errno;
-#ifdef MS_WINDOWS
-        /* Ctrl-C anywhere on the line or Ctrl-Z if the only character
-           on a line will set ERROR_OPERATION_ABORTED. Under normal
-           circumstances Ctrl-C will also have caused the SIGINT handler
-           to fire which will have set the event object returned by
-           _PyOS_SigintEvent. This signal fires in another thread and
-           is not guaranteed to have occurred before this point in the
-           code.
-
-           Therefore: check whether the event is set with a small timeout.
-           If it is, assume this is a Ctrl-C and reset the event. If it
-           isn't set assume that this is a Ctrl-Z on its own and drop
-           through to check for EOF.
-        */
-        if (GetLastError()==ERROR_OPERATION_ABORTED) {
-            hInterruptEvent = _PyOS_SigintEvent();
-            switch (WaitForSingleObjectEx(hInterruptEvent, 10, FALSE)) {
-            case WAIT_OBJECT_0:
-                ResetEvent(hInterruptEvent);
-                return 1; /* Interrupt */
-            case WAIT_FAILED:
-                return -2; /* Error */
+
+        if (!async_init) {
+                async_init = 1;
+                printf("\nPyOS_InputHook:Begin\n");
+                fflush(stdout);
+        }
+
+        while (1) {
+            struct timeval timeout = {0, 8000}; /* 0.008 second */
+            if (PyOS_InputHook!=NULL)
+                (void)(PyOS_InputHook)();
+            FD_SET(fd, &selectset);
+            /* select resets selectset if no input was available */
+            has_input = select(fd + 1, &selectset, NULL, NULL, &timeout);
+            err = errno;
+            if (!has_input)
+                continue;
+
+            if ( fgets(buf_ptr, 2, fp) != NULL ) {
+                if (buf_ptr[0]) {
+                    if ( buf_ptr[0]==10 ){
+                        p = buf;
+                        if (PyOS_InputProcessor!=NULL)
+                          fprintf(stderr, "PyOS_InputProcessor: %s",p);
+                        break;
+                    }
+                    buf_ptr++;
+                }
+            } else {
+                fprintf(stderr, "\nPyOS_InputHook:fgets->break-on-null\n");
+                break;
             }
+
         }
-#endif /* MS_WINDOWS */
+
+        if (p != NULL)
+            return 0; /* No error */
+
         if (feof(fp)) {
             clearerr(fp);
             return -1; /* EOF */
