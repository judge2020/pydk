--- panda3d-1.10.0/makepanda/makepanda.py	2019-01-03 16:01:10.000000000 +0100
+++ panda3d-1.10.0.armv7a-androideabi/makepanda/makepanda.py	2019-01-18 10:46:22.092905590 +0100
@@ -468,12 +468,11 @@
     else:
         # We're not cross-compiling; just take the host arch.
         PLATFORM = get_platform()
-
 else:
     target_arch = GetTargetArch()
     if target_arch == 'amd64':
         target_arch = 'x86_64'
-    PLATFORM = '{0}-{1}' % (target, target_arch)
+    PLATFORM = '{0}-{1}'.format(target, target_arch)
 
 
 print("Platform: %s" % PLATFORM)
@@ -1050,6 +1049,8 @@
         LibName("ALWAYS", '-llog')
         LibName("ANDROID", '-landroid')
         LibName("JNIGRAPHICS", '-ljnigraphics')
+        PkgEnable("EGL")
+        PkgEnable("GLES2")
 
     for pkg in MAYAVERSIONS:
         if (PkgSkip(pkg)==0 and (pkg in SDK)):
@@ -1896,7 +1897,7 @@
                 cmd += ' -target i686-none-linux-android'
             elif arch == 'x86_64':
                 cmd += ' -target x86_64-none-linux-android'
-            cmd += ' -lc -lm'
+            cmd += ' -lc -lm -l%s' % os.getenv('PANDA_PYLIB','python3.7m')
         else:
             cmd += " -pthread"
 
@@ -2052,7 +2053,8 @@
     cmd += "-cp " + GetOutputDir() + "/classes "
     cmd += "-d " + GetOutputDir() + "/classes "
     cmd += BracketNameWithQuotes(src)
-    oscmd(cmd)
+    #oscmd(cmd)
+    print("NO OP:",cmd)
 
 ##########################################################################################
 #
@@ -5220,19 +5222,50 @@
 # DIRECTORY: panda/src/androiddisplay/
 #
 
-if (GetTarget() == 'android' and PkgSkip("EGL")==0 and PkgSkip("GLES")==0 and not RUNTIME):
-  DefSymbol('GLES', 'OPENGLES_1', '')
-  OPTS=['DIR:panda/src/androiddisplay', 'DIR:panda/src/glstuff', 'BUILDING:PANDAGLES',  'GLES', 'EGL']
-  TargetAdd('pandagles_androiddisplay_composite1.obj', opts=OPTS, input='p3androiddisplay_composite1.cxx')
-  OPTS=['DIR:panda/metalibs/pandagles', 'BUILDING:PANDAGLES', 'GLES', 'EGL']
-  TargetAdd('pandagles_pandagles.obj', opts=OPTS, input='pandagles.cxx')
-  TargetAdd('libpandagles.dll', input='pandagles_pandagles.obj')
-  TargetAdd('libpandagles.dll', input='p3glesgsg_config_glesgsg.obj')
-  TargetAdd('libpandagles.dll', input='p3glesgsg_glesgsg.obj')
-  TargetAdd('libpandagles.dll', input='pandagles_androiddisplay_composite1.obj')
-  TargetAdd('libpandagles.dll', input='libp3android.dll')
-  TargetAdd('libpandagles.dll', input=COMMON_PANDA_LIBS)
-  TargetAdd('libpandagles.dll', opts=['MODULE', 'GLES', 'EGL'])
+print( 'TARGET' , GetTarget() )
+print( 'EGL' , PkgSkip("EGL") ) #FIXME ?
+
+if GetTarget() == 'android' and PkgSkip("EGL")==0:
+
+  print( 'GLES' , PkgSkip("GLES") )
+  print( 'GLES2' , PkgSkip("GLES2") )
+
+  if PkgSkip("GLES")==0 and not RUNTIME:
+    DefSymbol('GLES', 'OPENGLES_1', '')
+    OPTS=['DIR:panda/src/androiddisplay', 'DIR:panda/src/glstuff', 'DIR:' + native_app_glue, 'BUILDING:PANDAGLES',  'GLES', 'EGL']
+    TargetAdd('pandagles_androiddisplay_composite1.obj', opts=OPTS, input='p3androiddisplay_composite1.cxx')
+    OPTS=['DIR:panda/metalibs/pandagles', 'BUILDING:PANDAGLES', 'GLES', 'EGL']
+    TargetAdd('pandagles_pandagles.obj', opts=OPTS, input='pandagles.cxx')
+    TargetAdd('libpandagles.dll', input='pandagles_pandagles.obj')
+    TargetAdd('libpandagles.dll', input='p3glesgsg_config_glesgsg.obj')
+    TargetAdd('libpandagles.dll', input='p3glesgsg_glesgsg.obj')
+    TargetAdd('libpandagles.dll', input='pandagles_androiddisplay_composite1.obj')
+    TargetAdd('libpandagles.dll', input='libp3android.dll')
+    TargetAdd('libpandagles.dll', input=COMMON_PANDA_LIBS)
+    TargetAdd('libpandagles.dll', opts=['MODULE', 'GLES', 'EGL'])
+
+  elif PkgSkip("GLES2")==0 and not RUNTIME:
+    DefSymbol('GLES2', 'OPENGLES_2', '')
+
+    OPTS=['DIR:panda/src/androiddisplay', 'DIR:panda/src/glstuff', 'BUILDING:PANDAGLES2',  'GLES2', 'EGL']
+    TargetAdd('pandagles2_androiddisplay_composite1.obj', opts=OPTS, input='p3androiddisplay_composite1.cxx')
+
+    OPTS=['DIR:panda/metalibs/pandagles2', 'BUILDING:PANDAGLES2', 'GLES2', 'EGL']
+    TargetAdd('pandagles2_pandagles2.obj', opts=OPTS, input='pandagles2.cxx')
+    TargetAdd('libpandagles2.dll', input='pandagles2_pandagles2.obj')
+
+    TargetAdd('libpandagles2.dll', input='p3gles2gsg_config_gles2gsg.obj')
+    TargetAdd('libpandagles2.dll', input='p3gles2gsg_gles2gsg.obj')
+    TargetAdd('libpandagles2.dll', input='pandagles2_androiddisplay_composite1.obj')
+    TargetAdd('libpandagles2.dll', input='libp3android.dll')
+
+    TargetAdd('libpandagles2.dll', opts=['MODULE', 'GLES2', 'EGL'])
+    TargetAdd('libpandagles2.dll', input=COMMON_PANDA_LIBS)
+    TargetAdd('libpandagles2.dll', input=COMMON_PANDA_LIBS)
+  else:
+    print("either GLES or GLES2 must be selected for android platform")
+    raise SystemExit(1)
+
 
 #
 # DIRECTORY: panda/src/tinydisplay/
